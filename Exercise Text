(* Exercise 01:

   The goal of this function is to take a snake and move it forward one square.

   The signature of this function is
   {[
     val move_forward
       : Position.t
       -> Position.t list
       -> Direction.t
       -> (Position.t * Position.t list)
   ]}
   A function signuature describes the arguments to a function and it's return type.  The
   final value is the return type of the function.  All values before it are arguments to
   the function. In this case they are as follows:

   The first argument, which has a type of Position.t, represents the current head of the
   snake.

   The next argument, a Position.t list, represents the current tail of the snake. This is
   stored in reverse order, so the first element of the list is the very end of the
   snake's tail.

   The third argument, a Direction.t, represents the direction in which the snake is
   moving.

   The thing we will return is a tuple that represent the new head of the snake along with
   the new body of the snake.

   When the snake moves forward, its head will occupy a new space, and it will vacate the
   space that the end of its tail used to take up. In order to implement this, we want to
   remove the very end of the snake's tail (recall that we store the snake's body in
   reverse order), add the location of the snake's current head to the snake's body, and
   determine the new location of the snake's head.

   We've provided you with the following funtions that will help:

   [Direction.next_position] is a function defined in direction.ml which takes a
   direction and a position, and returns the position which is one square farther in the
   given direction. (Feel free to check out the function's definition (in direction.ml)
   and signature (in direction.mli).)

   [List.tl_exn] is a function that, given a list, returns the list with the first element
   removed. It has signature:
   {[
     List.tl_exn : 'a list -> 'a list
   ]}

   To declare a list of elements, you can use the following syntax:
   {[
     [ 1; 2; 3 ]
   ]}

   To concatenate two lists together, you can use the "@" operator. For example:
   {[
     let a = [ 1; 2; 3] in
     let b = [ 4; 5; 6] in
     a @ b
   ]}
   would construct the list [ 1; 2; 3; 4; 5; 6]

   To see if your function works, run

   $ dune runtest tests/exercise01

   which will run a series of tests on your function.

   If it doesn't print any output, your tests pass! If it prints output, it means your
   function's behavior differs from what is expected. The red output is what the test
   expected, and the green output is what the test printed with your function.

   Once you have this test passing go back to the README to move on.
*)

(* Exercise 02a:

    OCaml has a very useful tool called a match statement. It allows you to handle casework
    in a very concise way and it can help the compiler prevent you from making some common
    mistakes.

    You can write a match statement like:
    {[
    match THING_TO_MATCH with
    | CASE1 -> THING_TO_DO1
    | CASE2 -> THING_TO_DO2
        ...
    ]}

    More concretely, consider the following function
    {[
    let is_prime_less_than_10 x =
        if x = 2
        then true
        else if x = 3
        then true
        else if x = 5
        then true
        else if x = 7
        then true
        else false
    ]}

    This is a bit contrived, but this checks if the passed in variable x is 2 or 3 or 5
    or 7. This implementation is quite verbose, but it is a common enough pattern in
    code. In OCaml, a match statement allows us to express each of these cases in a much
    more terse and easy to read way:

    {[
    let is_prime_less_than_10 x =
        match x with
        | 2 -> true
        | 3 -> true
        | 5 -> true
        | 7 -> true
        | _ -> false
    ]}

    _ is a special catch-all that will match all things. This is the equivalent to the
    final else above. Note that ordering is important, because each case is evaluated in
    order. If the _ was not put last, every case after it would never get used, because _
    matches everything.

    For example,
    {[
    let is_prime_less_than_10 x =
        match x with
        | _ -> false
        | 2 -> true
        | 3 -> true
        | 5 -> true
        | 7 -> true
    ]}
    would always return false.

    We can simplify this function further because if multiple cases do the same thing, we
    combine them like this:

    {[
    let is_prime_less_than_10 x =
        match x with
        | 2
        | 3
        | 5
        | 7 -> true
        | _ -> false
    ]}

    The first 4 cases all use the same arrow, so we don't need to write "-> true" for each
    of the cases.

    In OCaml, white space doesn't matter, so you would be more likely to see the previous
    example written as:

    {[
    let is_prime_less_than_10 x =
        match x with
        | 2 | 3 | 5 | 7 -> true
        | _ -> false
    ]}

    Alright, on to exercise 02.

    First, check out the definition of type [t] at the top of this file.

    (By the way, all ml files will have a type [t]. This isn't a requirement, but it
    considered good style at Jane Street, so it is what we will use.)

    A [Direction.t] is defined as a variant. This is a type that expresses different
    possible cases. It's similar to an enum which you may have seen in another
    language. but it's more powerful as we'll see.

    In our case here, a [Direction.t] can be one of Left, Up, Right or Down.

    We want to write a function, "of_key", which takes a character (representing a key that
    the player of the game just pressed) and returns a [Direction.t] representing what
    direction the snake should be going after the player presses that key.

    Our game is meant to be played with the "w", "a", "s", and "d" keys, we'll want to
    match on each of the characters and return the direction that it corresponds to. (For
    example, "w" should correspond to "Up".)

    However, there are lots of possible characters, not just those 4, so we'll need to
    define what we want to do in those cases as well.

    There is a special variant we use in OCaml which is an option.  An option is defined:
    {[
    type 'a t =
        | Some of 'a
        | None
    ]}

    The 'a means that this type can be parametrized by any other type. For example, we can
    have {[ Some 5 ]}, which has type "int option", and {[ Some "hello" ]}, which has type
    "string option".

    In the case of [of_key], we would like to return a "Direction.t option". It should be
    Some if the key we got was one of the valid keys ('w', 'a', 's', or 'd'), and
    it should be None for all other characters.

    One last thing: in OCaml the way you refer to a character is with single quotes:
    {[ 'a' ]}

    When you are done with on_key,
    {[
    $ dune runtest tests/exercise02a
    ]}
    should no longer have errors for exercise02a.

    Once you're done, let's go to game.ml to work on exercise 02b.
*)

(* Exercise 02b:

   Now, we're going to write a function that will be called whenver the user presses a
   key. For now, the only keys we care about are the ones that should cause the snake to
   change direction.

   To start, let's explore this module a little.

   This module represents the game state. Take a look at the type [t] at the top of this
   file. This is a record definition.

   A record is a data structure that allows you to group several pieces of data together.
   The names of the fields are on the left side of the : and the types of those fields are
   on the right side. By default record fields are immutable. The keyword mutable allows
   us to modify the value of that field.

   This record has 4 elements: a snake, a game_state, an apple, and a board. We'll explain
   each field when it's needed.

   Take a note of the [set_direction] function provided in snake.ml. Given a snake and a
   direction, this function will update the direction stored in the snake.

   Note the signature of this function:
   {[
     val set_direction : t -> Direction.t -> unit
   ]}

   The "unit" type is a special type that is returned by all side-effecting
   functions. This includes behaviors like printing or, as in this function, setting a
   mutable value.

   Let's use the [of_key] function we just wrote in direction.ml to get the direction the
   user intended and set it in the snake.

   The way that you reference the snake field in the record is with a '.' :
   {[
     t.snake
   ]}

   If the key wasn't a valid input key, our [of_key] function will return None. In that
   case, we have no action to take. Because we will use a match we will still need to
   specify what action to take in that case. To implement this, we once again use the
   "unit" type. I expect you will have the following case in your match statement:
   {[
     | None -> ()
   ]}

   Once you've implemented [handle_key], run

   $ dune runtest tests/exercise02b


   You should see no more failures.

   Now if you build and run the game again, you should be able to use the 'w', 'a', 's',
   and 'd' keys to control the snake.

   You may notice weird behavior if you run the snake off the game board. We'll handle
   collision behavior in the next exercise.

   Once you're done, go back to README.mkd for the next exercise.
*)

(* 
    Exercise 03a:

    This module is a simple record that represent the parameters of the board. It is a
    record with two fields, height and width.

    Our goal is to write the [in_bounds] function which given a board, and a position, will
    return true or false based on if the Position is in the Board.

    Position is a record that contains two fields.  Take a look a the signature in
    position.mli to see that type.

    Because we use 0 indexing, the bottom left corner of the board is (0,0) and the top
    right is (width-1,height-1).

    Some hints:
    - >, >=, <, <= are the int comparison operators
    - && is how to represent boolean "and"
    - the following is a boolean statement whose value is true:
    {[
    3 < 5
    ]}

    Once the tests for 03a are passing, let's go to game.ml to finish up collision
    detection. *)

    (* Exercise 03b:

    Take a look at the definition of the [Game_state.t] type in game_state.mli. Do the
    three variants make sense?

    [check_for_collisons] will be called after the snake has been updated to walk forward
    one space. It should check to make sure the snake is still inside the bounds of
    the game board. If the snake is now out of bounds we want to update the game_state
    to note that fact that the game is now over.

    The in_bounds function you wrote in 03a was in board module, so you can access it with
    Board.in_bounds

    If there is a collison we should set the game_state of t to be
    {[
        Game_over "Out of bounds!"
    ]}

    The way that you set a mutable record value is with the "<-" operator. For example:

    {[
        type t = { mutable counter : int }

        let increment_counter t =
        t.counter <- t.counter + 1
        ;;
    ]}

    [Snake.head] is a function we've provided for you that returns a Position.t
    representing the head of the snake.
    {[
        val head : Snake.t -> Position.t
    ]}

    Once you have implemented [check_for_collisions],

    $ dune runtest tests/exercise03b

    should have no output.

    Return to README.mkd for instructions on exercise 04.
*)

(* Exercise 04a:

   Just like we needed to check if the head of the snake went out of bounds, we also need
   to check if the snake collides with itself. [collides_with_self] should return true
   if the head of the snake overlaps with any of the rest of its body.

   [List.for_all] is a function you may find handy. Its signature is:

   {[
     List.for_all : 'a list -> f:('a -> bool) -> bool
   ]}

   It takes a list and a predicate, "f", and returns true if "f" applied to all of its
   arguments is true, and false otherwise.

   The syntax "f:('a -> bool)" in the signature above is used to indicate a labeled
   argument. Labeled arguments are a handy tool for preventing mistakes. For example,
   consider this function, which appears in board.ml(i):

   {[
     val create_unlabeled : int -> int -> t
     let create_unlabeled height width = { height; width }
   ]}

   [create_unlabeled] takes two ints, and makes a board with those dimensions. You would call
   this function like so:

   {[
     create_unlabeled 10 12
   ]}

   At the call side, it's very ambiguous which int is the height and which int is the
   width, so it's very easy to supply arguments in the wrong order.

   We can rewrite this function using labeled arguments:
   {[
     val create : height:int -> width:int -> t
     let create ~height ~width = { height; width }
   ]}

   To call this function, we would instead write:

   {[
     create_board ~height:10 ~width:12
   ]}

   This syntax makes it very clear which argument is intended to be which.

   You'll see that throughout the game, any function that is taking two arguments of the
   same type probably uses labelled arguments to distinguish them.

   Note that the labeled argument "f" in [List.for_all] is itself is a function. This is
   pretty cool!

   In OCaml, functions are values and can be passed to other functions as arguments. You
   can also declare a function inside another function:

   {[
     let neither_is_0 x y =
       let not_zero n =  not(n = 0) in
       not_zero x && not_zero y
   ]}

   Creating "sub" functions like this allows us to simplify our code and prevent mistakes
   from copying and pasting.

   One hint before you get started: we have provided the function [Position.equal], which
   is defined in position.ml. Check out position.mli for its signature and explanation.

   Let's put these all together to write [collides_with_self].

   To test this function, run:

   $ dune runtest tests/exercise04a

   You should see no output for exercise04a. Once the test passes, proceed to exercise 04b
   in game.ml
*)

(* Exercise 04b:

   [step] is the function that is called in a loop to make the game progress. As you can
   see, we have provided part of this for you.

   [step] returns false if the snake collided with itself, and true if the game can
   continue.

   We've already handled the case where the value is true, but when the value is false, we
   currently do nothing.

   Modify this function to set the [game_state] field of the game with the message
   "Self collision!".

   When all the tests for exercise 04 pass, return to README.mkd for exercise 05. 
*)

(* Exercise 05:

   [create] takes in a board and a snake and creates a new apple with a location chosen
   randomly from all possible locations inside the board that are not currently occupied
   by the snake. If there is no location possible it should return None. (This will
   happen if the player wins!)

   We have used records before, but creating the apples location is the first time we'll
   need to make a new one. We can define a record like so:

   {[
     { field_name1 = value1
     ; field_name2 = value2
     }
   ]}

   One function you might find handy for this exercise is [Board.all_locations], which is
   defined in board.ml. [Board.all_locations] takes a board and returns a list of all
   positions on the board.

   Another function that may be useful is [Snake.all_locations], which is defined in
   snake.ml. This function takes a snake and returns all locations it currently occupies.

   Before you get started, check out LIST_FUNCTIONS.mkd for some useful new List
   functions. You probably won't need all of these functions, but they should give you a
   few options for how to write [create].

   You may feel like your solution to this function is inefficient. That's perfectly fine,
   since the board is quite small. Talk to a TA if you'd like to learn other tools that
   might help make this function more efficient.

   When you're done writing [create], make sure to check that tests pass by running

   $ dune runtest tests/exercise05 
*)

(* Exercise 06a:

   When the snake consumes an apple, we want the snake to grow over the next few time
   steps. To implement this, we store [extensions_remaining] in the snake.

   This function takes in an amount the snake should grow and should increments the
   current value of [extensions_remaining] in the snake record.

   When you've implemented this, make sure the tests for exercise 06a pass:

   $ dune runtest tests/exercise06a
*)

(* Exercise 06c:

   Now, let's write a modified version of [move_forward] that handles the snake growing.

   If [extensions_remaining] is greater than 0, then the snake should move forward without
   removing the end of its tail, so that its overall length increases. We should also make
   sure to update [extensions_remaining].

   Like [move_forward] we should return the new head and tail of the snake.

   Once you've implemented [move_forward_and_grow], let's update the [step] function below
   to use [move_forward_and_grow] rather than [move_forward].

   At this point, running

   $ dune runtest tests/exercise06c

   should produce no output.

   You should now have a complete playable game! Make sure to build and run the game to
   try it out. Once you're ready, return to README.mkd for exercise extensions.
*)

(* Exercise 06b:

   Every time the snake steps forward, [maybe_consume_apple] should be called.
   It should check if the snake head is at the current location of the apple
   stored in the game.

   Hint: We've given you some functions to help with this.  Take a look at snake.mli and
   apple.mli to find functions to get the locations you need to consider

   If it is, we should call the [grow_over_next_steps] function in snake.ml that we just
   implemented to update the snake so that it can grow over the next few time steps. The
   amount it should grow is based on the value of [Apple.amount_to_grow].

   If the apple is consumed, we should also spawn a new apple on the board using the
   function you implemented in exercise 05, [Apple.create].

   Recall that if [Apple.create] returns None, that means that we have won the game, so we
   should update the game_state to reflect that.

*)